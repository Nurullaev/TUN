import asyncio
import logging
import socket
import sys
import time
from asyncio.subprocess import PIPE
from logging.handlers import TimedRotatingFileHandler

try:
    import aiohttp
except ImportError:
    print("–û—à–∏–±–∫–∞: –º–æ–¥—É–ª—å aiohttp –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip install aiohttp", file=sys.stderr)
    sys.exit(1)

from telegram_commands import TelegramCommandHandler

# --- –ù–ê–°–¢–†–û–ô–ö–ò (–†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –ó–î–ï–°–¨) ---
BOT_TOKEN = ""
CHAT_ID = ""
ALLOWED_USER_ID = ""

RESTART_INTERVAL_SECONDS = 5 * 3600  # 5 —á–∞—Å–æ–≤
HEALTH_CHECK_INTERVAL_SECONDS = 60  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
TUNNEL_HOST = "127.0.0.1"
TUNNEL_PORT = 8080
LOG_FILENAME = 'manager.log'

VK_TUNNEL_COMMAND = [
    "vk-tunnel", "--verbose", "--insecure=1", "--http-protocol=http", "--ws-protocol=ws",
    "--ws-origin=0", "--host", TUNNEL_HOST, "--port", str(TUNNEL_PORT),
    "--ws-ping-interval=30"
]
# ----------------------------------------------------

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
if not all([BOT_TOKEN, CHAT_ID, ALLOWED_USER_ID]):
    print("!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê !!!", file=sys.stderr)
    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ BOT_TOKEN, CHAT_ID –∏ ALLOWED_USER_ID.", file=sys.stderr)
    sys.exit(1)

try:
    ALLOWED_USER_ID = int(ALLOWED_USER_ID)
except (ValueError, TypeError):
    print("!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê !!!", file=sys.stderr)
    print("ALLOWED_USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", file=sys.stderr)
    sys.exit(1)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –õ–û–ì–û–í –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –†–û–¢–ê–¶–ò–ï–ô ---
log_formatter = logging.Formatter("%(asctime)s %(levelname)s [%(name)s] %(message)s")
file_handler = TimedRotatingFileHandler(LOG_FILENAME, when='midnight', interval=1, backupCount=7, encoding='utf-8')
file_handler.setFormatter(log_formatter)
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setFormatter(log_formatter)
root_logger = logging.getLogger()
root_logger.setLevel(logging.INFO)
root_logger.addHandler(file_handler)
root_logger.addHandler(console_handler)

log = logging.getLogger("manager")
log_vktunnel = logging.getLogger("vk-tunnel")
log_telegram = logging.getLogger("telegram")

# --- –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ---
STATE = {
    'notification_sent': False,
    'process_start_time': None,
    'last_output_time': None,
    'process_pid': None,
    'last_health_check_time': None  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
}

def get_server_info():
    try:
        hostname = socket.getfqdn()
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.connect(("8.8.8.8", 80))
            ip_address = s.getsockname()[0]
        return ip_address, hostname
    except Exception:
        return "127.0.0.1", "localhost"

SERVER_IP, SERVER_HOSTNAME = get_server_info()

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
telegram_handler = TelegramCommandHandler(BOT_TOKEN, ALLOWED_USER_ID, STATE)

async def send_telegram_message(text: str, chat_id=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    target_chat_id = chat_id or CHAT_ID
    await telegram_handler.send_message(text, target_chat_id)

async def monitor_stream(stream: asyncio.StreamReader):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    while True:
        try:
            line_bytes = await stream.readline()
            if not line_bytes:
                log.warning("–ü–æ—Ç–æ–∫ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—ã–ª –∑–∞–∫—Ä—ã—Ç.")
                break

            STATE['last_output_time'] = time.time()
            line = line_bytes.decode('utf-8', errors='ignore').strip()
            log_vktunnel.info(line)

            if not STATE['notification_sent'] and line.startswith("wss:"):
                try:
                    wss_url = line.split(maxsplit=1)[1]
                    log.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω WSS –∞–¥—Ä–µ—Å: {wss_url}. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
                    message = (f"üöÄ *VK Tunnel –∑–∞–ø—É—â–µ–Ω/–ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω*\n\n"
                               f"üñ•Ô∏è *–°–µ—Ä–≤–µ—Ä:* `{SERVER_HOSTNAME}`\n"
                               f"üåê *IP:* `{SERVER_IP}`\n\n"
                               f"‚ú® *–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*\n`python client.py --wss {wss_url}`")
                    await send_telegram_message(message)
                    STATE['notification_sent'] = True
                except IndexError:
                    log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å URL –∏–∑ —Å—Ç—Ä–æ–∫–∏: '{line}'")
        except asyncio.CancelledError:
            break

async def check_tunnel_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ç—É–Ω–Ω–µ–ª—è"""
    log.info(f"–ê–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–ø—É—â–µ–Ω–∞. –ò–Ω—Ç–µ—Ä–≤–∞–ª: {HEALTH_CHECK_INTERVAL_SECONDS}—Å.")
    await asyncio.sleep(15)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫

    while True:
        try:
            reader, writer = await asyncio.open_connection(TUNNEL_HOST, TUNNEL_PORT)
            writer.close()
            await writer.wait_closed()

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            STATE['last_health_check_time'] = time.time()
            log.info(f"Health check: –ø–æ—Ä—Ç {TUNNEL_HOST}:{TUNNEL_PORT} –¥–æ—Å—Ç—É–ø–µ–Ω.")

        except ConnectionRefusedError:
            log.error(f"HEALTH CHECK FAILED: –ø–æ—Ä—Ç {TUNNEL_HOST}:{TUNNEL_PORT} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ò–Ω–∏—Ü–∏–∏—Ä—É—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫.")
            telegram_handler.manual_restart_event.set()
            break
        except asyncio.CancelledError:
            log.info("–ê–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            break
        except Exception as e:
            log.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Ä—Ç–∞: {e}")

        await asyncio.sleep(HEALTH_CHECK_INTERVAL_SECONDS)

async def manage_vk_tunnel_lifecycle():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º vk-tunnel"""
    while True:
        log.info(f"–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞. –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞–Ω–æ–≤—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {RESTART_INTERVAL_SECONDS / 3600:.1f} —á–∞—Å–æ–≤.")
        STATE.update({
            'notification_sent': False,
            'process_start_time': time.time(),
            'last_output_time': time.time(),
            'process_pid': None,
            'last_health_check_time': time.time()
        })
        telegram_handler.manual_restart_event.clear()

        try:
            process = await asyncio.create_subprocess_exec(
                *VK_TUNNEL_COMMAND,
                stdout=PIPE,
                stderr=PIPE,
                stdin=None
            )
            STATE['process_pid'] = process.pid
            log.info(f"–ü—Ä–æ—Ü–µ—Å—Å vk-tunnel –∑–∞–ø—É—â–µ–Ω —Å PID: {process.pid}")
        except FileNotFoundError:
            log.critical("–ö–æ–º–∞–Ω–¥–∞ 'vk-tunnel' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 30—Å...")
            await asyncio.sleep(30)
            continue
        except Exception as e:
            log.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å vk-tunnel: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 30—Å...")
            await asyncio.sleep(30)
            continue

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitor_stdout_task = asyncio.create_task(monitor_stream(process.stdout))
        monitor_stderr_task = asyncio.create_task(monitor_stream(process.stderr))
        health_check_task = asyncio.create_task(check_tunnel_health())

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        wait_process_task = asyncio.create_task(process.wait())
        wait_timer_task = asyncio.create_task(asyncio.sleep(RESTART_INTERVAL_SECONDS))
        wait_command_task = asyncio.create_task(telegram_handler.manual_restart_event.wait())

        # –ñ–¥–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        done, pending = await asyncio.wait(
            [wait_process_task, wait_timer_task, wait_command_task, health_check_task],
            return_when=asyncio.FIRST_COMPLETED
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        reason = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞"
        if wait_process_task in done:
            reason = f"–ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å–∞–º —Å –∫–æ–¥–æ–º {process.returncode}"
        elif wait_timer_task in done:
            reason = "—Å—Ä–∞–±–æ—Ç–∞–ª –ø–ª–∞–Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä"
        elif wait_command_task in done:
            reason = "–ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª health check"
        elif health_check_task in done:
            reason = "health check –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–æ–±–ª–µ–º—É"

        log.warning(f"–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ vk-tunnel (PID: {process.pid}). –ü—Ä–∏—á–∏–Ω–∞: {reason}.")

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for task in pending:
            task.cancel()

        monitor_stdout_task.cancel()
        monitor_stderr_task.cancel()
        health_check_task.cancel()

        await asyncio.gather(
            monitor_stdout_task,
            monitor_stderr_task,
            health_check_task,
            return_exceptions=True
        )

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –æ–Ω –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        if process.returncode is None:
            try:
                process.terminate()
                await asyncio.wait_for(process.wait(), timeout=5)
                log.info(f"–ü—Ä–æ—Ü–µ—Å—Å {process.pid} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω (terminate).")
            except asyncio.TimeoutError:
                log.warning(f"–ü—Ä–æ—Ü–µ—Å—Å {process.pid} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ terminate. –£–±–∏–≤–∞–µ–º (kill)...")
                process.kill()
                await process.wait()

        log.info("–ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º...")
        await asyncio.sleep(5)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    log.info("–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ vk-tunnel —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ Telegram.")
    log.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: BOT_TOKEN={'*' * 10}, CHAT_ID={CHAT_ID}, ALLOWED_USER_ID={ALLOWED_USER_ID}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await asyncio.gather(
        manage_vk_tunnel_lifecycle(),
        telegram_handler.listen_for_commands()
    )

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        log.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        log.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)
